<snippet>
	<content><![CDATA[
int h[N], e[M], ne[M], idx;
int dfn[N], low[N], ts, stk[N], top;
int id[N], cnt;
bool ins[N];  

struct TwoSat {
    int n;
    std::vector<bool> ans;
    TwoSat(int n) : n(n), ans(n) {
        memset(h , -1 , sizeof h);
        // idx = ts = top = cnt = 0;
        // memset(dfn , 0 , sizeof dfn);
        // memset(low , 0 , sizeof low);
        // memset(stk , 0 ,sizeof stk);
        // memset(id , 0 ,sizeof id);
        // memset(ins , 0 , sizeof ins);
    }

    void add(int a, int b)
    {
        e[idx] = b, ne[idx] = h[a], h[a] = idx ++ ;
    }

    void addClause(int u, bool f, int v, bool g) {
        add(2 * u + !f, 2 * v + g);
        add(2 * v + !g, 2 * u + f);
    }

    void tarjan(int u)
    {
        dfn[u] = low[u] = ++ ts;
        stk[ ++ top] = u, ins[u] = true;
        for (int i = h[u]; ~i; i = ne[i])
        {
            int j = e[i];
            if (!dfn[j])
            {
                tarjan(j);
                low[u] = min(low[u], low[j]);
            } else if (ins[j]) low[u] = min(low[u], dfn[j]);
        }

        if (low[u] == dfn[u])
        {
            int y;
            cnt ++ ;
            do
            {
                y = stk[top -- ], ins[y] = false, id[y] = cnt;
            } while (y != u);
        }
    }

    bool satisfiable() {
        for (int i = 0; i < n * 2; i ++ )
            if (!dfn[i])
                tarjan(i);
        for (int i = 0; i < n; ++i) {
            if (id[2 * i] == id[2 * i + 1]) return false;
            ans[i] = id[2 * i] > id[2 * i + 1];
        }
        return true;
    }
    std::vector<bool> answer() { return ans; }
};
]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>TwoSat</tabTrigger>
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<scope>source.c++</scope>
</snippet>
